<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tesseract</name>
    </assembly>
    <members>
        <member name="M:Tesseract.Internal.Guard.Require(System.String,System.Boolean)">
            <summary>
            Ensures the given <paramref name="condition"/> is true.
            </summary>
            <exception cref="T:System.ArgumentException">The <paramref name="condition"/> is not true.</exception>
            <param name="paramName">The name of the parameter, used when generating the exception.</param>
            <param name="condition">The value of the parameter to check.</param>
        </member>
        <member name="M:Tesseract.Internal.Guard.Require(System.String,System.Boolean,System.String)">
            <summary>
            Ensures the given <paramref name="condition"/> is true.
            </summary>
            <exception cref="T:System.ArgumentException">The <paramref name="condition"/> is not true.</exception>
            <param name="paramName">The name of the parameter, used when generating the exception.</param>
            <param name="condition">The value of the parameter to check.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Tesseract.Internal.Guard.Require(System.String,System.Boolean,System.String,System.Object[])">
            <summary>
            Ensures the given <paramref name="condition"/> is true.
            </summary>
            <exception cref="T:System.ArgumentException">The <paramref name="condition"/> is not true.</exception>
            <param name="paramName">The name of the parameter, used when generating the exception.</param>
            <param name="condition">The value of the parameter to check.</param>
            <param name="message">The error message.</param>
            <param name="args">The message argument used to format <paramref name="message" />.</param>
        </member>
        <member name="M:Tesseract.Internal.Guard.RequireNotNullOrEmpty(System.String,System.String)">
            <summary>
            Ensures the given <paramref name="value"/> is not null or empty.
            </summary>
            <exception cref="T:System.ArgumentException">The <paramref name="value"/> is null or empty.</exception>
            <param name="paramName">The name of the parameter, used when generating the exception.</param>
            <param name="value">The value of the parameter to check.</param>
        </member>
        <member name="M:Tesseract.Internal.Guard.Verify(System.Boolean,System.String,System.Object[])">
            <summary>
            Verifies the given <paramref name="condition"/> is <c>True</c>; throwing an <see cref="T:System.InvalidOperationException"/> when the condition is not met.
            </summary>
            <param name="condition">The condition to be tested.</param>
            <param name="message">The error message to raise if <paramref name="condition"/> is <c>False</c>.</param>
            <param name="args">Optional formatting arguments.</param>
        </member>
        <member name="T:Tesseract.Internal.TessConvert">
            <summary>
            Utility helpers to handle converting variable values.
            </summary>
        </member>
        <member name="T:Tesseract.Interop.ITessApiSignatures">
            <summary>
            The exported tesseract api signatures.
            </summary>
            <remarks>
            Please note this is only public for technical reasons (you can't proxy a internal interface).
            It should be considered an internal interface and is NOT part of the public api and may have
            breaking changes between releases.
            </remarks>
        </member>
        <member name="M:Tesseract.Interop.ITessApiSignatures.BaseApiCreate">
            <summary>
            Creates a new BaseAPI instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tesseract.Interop.ITessApiSignatures.BaseApiDelete(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Deletes a base api instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tesseract.Interop.Constants">
            <summary>
            Description of Constants.
            </summary>
        </member>
        <member name="T:Tesseract.Interop.HostProcessInfo">
            <summary>
            Provides information about the hosting process.
            </summary>
        </member>
        <member name="T:Tesseract.Interop.ILeptonicaApiSignatures">
            <summary>
            The exported leptonica api signatures.
            </summary>
            <remarks>
            Please note this is only public for technical reasons (you can't proxy a internal interface).
            It should be considered an internal interface and is NOT part of the public api and may have 
            breaking changes between releases.
            </remarks>
        </member>
        <member name="M:Tesseract.Interop.ILeptonicaApiSignatures.pixcmapCreate(System.Int32)">
            <summary>
            Creates a new colormap with the specified <paramref name="depth"/>.
            </summary>
            <param name="depth">The depth of the pix in bpp, can be 2, 4, or 8</param>
            <returns>The pointer to the color map, or null on error.</returns>
        </member>
        <member name="M:Tesseract.Interop.ILeptonicaApiSignatures.pixcmapCreateRandom(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new colormap of the specified <paramref name="depth"/> with random colors where the first color can optionally be set to black, and the last optionally set to white.
            </summary>
            <param name="depth">The depth of the pix in bpp, can be 2, 4, or 8</param>
            <param name="hasBlack">If set to 1 the first color will be black.</param>
            <param name="hasWhite">If set to 1 the last color will be white.</param>
            <returns>The pointer to the color map, or null on error.</returns>
        </member>
        <member name="M:Tesseract.Interop.ILeptonicaApiSignatures.pixcmapCreateLinear(System.Int32,System.Int32)">
            <summary>
            Creates a new colormap of the specified <paramref name="depth"/> with equally spaced gray color values. 
            </summary>
            <param name="depth">The depth of the pix in bpp, can be 2, 4, or 8</param>
            <param name="levels">The number of levels (must be between 2 and 2^<paramref name="depth"/></param>
            <returns>The pointer to the colormap, or null on error.</returns>
        </member>
        <member name="M:Tesseract.Interop.ILeptonicaApiSignatures.pixcmapDestroy(System.IntPtr@)">
            <summary>
            Destorys and cleans up any memory used by the color map.
            </summary>
            <param name="cmap">The pointer to the colormap instance, set to null on success.</param>
        </member>
        <member name="M:Tesseract.Interop.ILeptonicaApiSignatures.pixcmapGetCount(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Gets the number of color entries in the color map.
            </summary>
            <param name="cmap">The pointer to the colormap instance.</param>
            <returns>Returns the number of color entries in the color map, or 0 on error.</returns>
        </member>
        <member name="M:Tesseract.Interop.ILeptonicaApiSignatures.pixcmapGetFreeCount(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Gets the number of free color entries in the color map.
            </summary>
            <param name="cmap">The pointer to the colormap instance.</param>
            <returns>Returns the number of free color entries in the color map, or 0 on error.</returns>
        </member>
        <member name="M:Tesseract.Interop.ILeptonicaApiSignatures.pixcmapGetDepth(System.Runtime.InteropServices.HandleRef)">
            <returns>Returns color maps depth, or 0 on error.</returns>
        </member>
        <member name="M:Tesseract.Interop.ILeptonicaApiSignatures.pixcmapClear(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Removes all colors from the color map by setting the count to zero.
            </summary>
            <param name="cmap">The pointer to the colormap instance.</param>
            <returns>Returns 0 if OK, 1 on error.</returns>
        </member>
        <member name="M:Tesseract.Interop.ILeptonicaApiSignatures.pixcmapAddColor(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds the color to the pix color map if their is room.
            </summary>
            <returns>Returns 0 if OK, 1 on error.</returns>
        </member>
        <member name="M:Tesseract.Interop.ILeptonicaApiSignatures.pixcmapAddNewColor(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Adds the specified color if it doesn't already exist, returning the colors index in the data array.
            </summary>
            <param name="cmap">The pointer to the colormap instance.</param>
            <param name="redValue">The red value</param>
            <param name="greenValue">The green value</param>
            <param name="blueValue">The blue value</param>
            <param name="colorIndex">The index of the new color if it was added, or the existing color if it already existed.</param>
            <returns>Returns 0 for success, 1 for error, 2 for not enough space.</returns>
        </member>
        <member name="M:Tesseract.Interop.ILeptonicaApiSignatures.pixcmapAddNearestColor(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Adds the specified color if it doesn't already exist, returning the color's index in the data array.
            </summary>
            <remarks>
            If the color doesn't exist and there is not enough room to add a new color return the nearest color.
            </remarks>
            <param name="cmap">The pointer to the colormap instance.</param>
            <param name="redValue">The red value</param>
            <param name="greenValue">The green value</param>
            <param name="blueValue">The blue value</param>
            <param name="colorIndex">The index of the new color if it was added, or the existing color if it already existed.</param>
            <returns>Returns 0 for success, 1 for error, 2 for not enough space.</returns>
        </member>
        <member name="M:Tesseract.Interop.ILeptonicaApiSignatures.pixcmapUsableColor(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Checks if the color already exists or if their is enough room to add it.
            </summary>
            <param name="cmap">The pointer to the colormap instance.</param>
            <param name="redValue">The red value</param>
            <param name="greenValue">The green value</param>
            <param name="blueValue">The blue value</param>
            <param name="usable">Returns 1 if usable; 0 if not.</param>
            <returns>Returns 0 if OK, 1 on error.</returns>
        </member>
        <member name="M:Tesseract.Interop.ILeptonicaApiSignatures.pixcmapAddBlackOrWhite(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32@)">
            <summary>
            Adds a color (black\white) if not already there returning it's index through <paramref name="index"/>.
            </summary>
            <param name="cmap">The pointer to the colormap instance.</param>
            <param name="color">The color to add (0 for black; 1 for white)</param>
            <param name="index">The index of the color.</param>
            <returns>Returns 0 if OK; 1 on error.</returns>
        </member>
        <member name="M:Tesseract.Interop.ILeptonicaApiSignatures.pixcmapSetBlackAndWhite(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32)">
            <summary>
            Sets the darkest color in the colormap to black, if <paramref name="setBlack"/> is 1. 
            Sets the lightest color in the colormap to white if <paramref name="setWhite"/> is 1. 
            </summary>
            <param name="cmap">The pointer to the colormap instance.</param>
            <param name="setBlack">0 for no operation; 1 to set darket color to black</param>
            <param name="setWhite">0 for no operation; 1 to set lightest color to white</param>
            <returns>Returns 0 if OK; 1 on error.</returns>
        </member>
        <member name="M:Tesseract.Interop.ILeptonicaApiSignatures.pixcmapGetColor32(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32@)">
            <summary>
            Gets the color at the specified index.
            </summary>
            <remarks>
            The alpha channel will always be zero as it is not used in Leptonica color maps.
            </remarks>
            <param name="cmap">The pointer to the colormap instance.</param>
            <param name="index">The index of the color entry.</param>
            <param name="color">The color entry as 32 bit value</param>
            <returns>Returns 0 if OK; 1 if not accessable (caller should check).</returns>
        </member>
        <member name="M:Tesseract.Interop.ILeptonicaApiSignatures.pixcmapResetColor(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets a previously allocated color entry.
            </summary>
            <param name="cmap">The pointer to the colormap instance.</param>
            <param name="index">The index of the colormap entry</param>
            <param name="redValue"></param>
            <param name="blueValue"></param>
            <param name="greenValue"></param>
            <returns>Returns 0 if OK; 1 if not accessable (caller should check).</returns>
        </member>
        <member name="M:Tesseract.Interop.MarshalHelper.StrLength(System.IntPtr)">
            <summary>
            Gets the number of bytes in a null terminated byte array.
            </summary>
        </member>
        <member name="M:Tesseract.IResultRenderer.BeginDocument(System.String)">
            <summary>
            Begins a new document with the specified <paramref name="title"/>.
            </summary>
            <param name="title">The title of the new document.</param>
            <returns>A handle that when disposed of ends the current document.</returns>
        </member>
        <member name="M:Tesseract.IResultRenderer.AddPage(Tesseract.Page)">
            <summary>
            Add the page to the current document.
            </summary>
            <param name="page"></param>
            <returns><c>True</c> if the page was successfully added to the result renderer; otherwise false.</returns>
        </member>
        <member name="P:Tesseract.IResultRenderer.PageNumber">
            <summary>
            Gets the current page number; returning -1 if no page has yet been added otherwise the number
            of the last added page (starting from 0).
            </summary>
        </member>
        <member name="T:Tesseract.Orientation">
            <summary>
            Represents orientation that the page would need to be rotated so that .
            </summary>
            <remarks>
            Orientation is defined as to what side of the page would need to correspond to the 'up' direction such that the characters will
            be read able. Another way of looking at this what direction you need to rotate you head so that "up" aligns with Orientation, 
            then the characters will appear "right side up" and readable.
            
            In short:
            <list type="bullet">
            	<item>PageUp - Page is correctly alligned with up and no rotation is needed.</item>
            	<item>PageRight - Page needs to be rotated so the right hand side is up, 90 degress counter clockwise, to be readable.</item>
            	<item>PageDown - Page needs to be rotated so the bottom side is up, 180 degress counter clockwise, to be readable.</item>
            	<item>PageLeft - Page needs to be rotated so the left hand side is up, 90 degress clockwise, to be readable.</item>
            </list>
            </remarks>
        </member>
        <member name="F:Tesseract.Orientation.PageUp">
            <summary>
            Page is correctly alligned with up and no rotation is needed.
            </summary>
        </member>
        <member name="F:Tesseract.Orientation.PageRight">
            <summary>
            Page needs to be rotated so the right hand side is up, 90 degress counter clockwise, to be readable.
            </summary>
        </member>
        <member name="F:Tesseract.Orientation.PageDown">
            <summary>
            Page needs to be rotated so the bottom side is up, 180 degress counter clockwise, to be readable.
            </summary>
        </member>
        <member name="F:Tesseract.Orientation.PageLeft">
            <summary>
            Page needs to be rotated so the left hand side is up, 90 degress clockwise, to be readable.
            </summary>
        </member>
        <member name="P:Tesseract.Page.Image">
            <summary>
            Gets the <see cref="T:Tesseract.Pix"/> that is being ocr'd.
            </summary>
        </member>
        <member name="P:Tesseract.Page.ImageName">
            <summary>
            Gets the name of the image being ocr'd.
            </summary>
            <remarks>
            This is also used for some of the more advanced functionality such as identifying the associated UZN file if present.
            </remarks>
        </member>
        <member name="P:Tesseract.Page.PageSegmentMode">
            <summary>
            Gets the page segmentation mode used to OCR the specified image.
            </summary>
        </member>
        <member name="P:Tesseract.Page.RegionOfInterest">
            <summary>
            The current region of interest being parsed.
            </summary>
        </member>
        <member name="M:Tesseract.Page.GetThresholdedImage">
            <summary>
            Gets the thresholded image that was OCR'd.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tesseract.Page.GetText">
            <summary>
            Gets the page's content as plain text.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tesseract.PageSegMode">
            <summary>
            Represents the possible page layou analysis modes.
            </summary>
        </member>
        <member name="F:Tesseract.PageSegMode.OsdOnly">
            <summary>
            Orientation and script detection (OSD) only.
            </summary>
        </member>
        <member name="F:Tesseract.PageSegMode.AutoOsd">
            <summary>
            Automatic page sementation with orientantion and script detection (OSD).
            </summary>
        </member>
        <member name="F:Tesseract.PageSegMode.AutoOnly">
            <summary>
            Automatic page segmentation, but no OSD, or OCR.
            </summary>
        </member>
        <member name="F:Tesseract.PageSegMode.Auto">
            <summary>
            Fully automatic page segmentation, but no OSD.
            </summary>
        </member>
        <member name="F:Tesseract.PageSegMode.SingleColumn">
            <summary>
            Assume a single column of text of variable sizes.
            </summary>
        </member>
        <member name="F:Tesseract.PageSegMode.SingleBlockVertText">
            <summary>
            Assume a single uniform block of vertically aligned text.
            </summary>
        </member>
        <member name="F:Tesseract.PageSegMode.SingleBlock">
            <summary>
            Assume a single uniform block of text.
            </summary>
        </member>
        <member name="F:Tesseract.PageSegMode.SingleLine">
            <summary>
            Treat the image as a single text line.
            </summary>
        </member>
        <member name="F:Tesseract.PageSegMode.SingleWord">
            <summary>
            Treat the image as a single word.
            </summary>
        </member>
        <member name="F:Tesseract.PageSegMode.CircleWord">
            <summary>
            Treat the image as a single word in a circle.
            </summary>
        </member>
        <member name="F:Tesseract.PageSegMode.SingleChar">
            <summary>
            Treat the image as a single character.
            </summary>
        </member>
        <member name="F:Tesseract.PageSegMode.SparseText">
            <summary>
            Find as much text as possible in no particular order.
            </summary>
        </member>
        <member name="F:Tesseract.PageSegMode.SparseTextOsd">
            <summary>
            Sparse text with orientation and script detection.
            </summary>
        </member>
        <member name="F:Tesseract.PageSegMode.RawLine">
            <summary>
            Treat the image as a single text line, bypassing hacks that are Tesseract-specific.
            </summary>
        </member>
        <member name="F:Tesseract.PageSegMode.Count">
            <summary>        
            Number of enum entries.
            </summary>
        </member>
        <member name="F:Tesseract.Pix.VerySmallAngle">
            <summary>
            A small angle, in radians, for threshold checking. Equal to about 0.06 degrees.
            </summary>
        </member>
        <member name="F:Tesseract.Pix.imageFomatLookup">
            <summary>
            Used to lookup image formats by extension.
            </summary>
        </member>
        <member name="M:Tesseract.Pix.#ctor(System.IntPtr)">
            <summary>
            Creates a new pix instance using an existing handle to a pix structure.
            </summary>
            <remarks>
            Note that the resulting instance takes ownership of the data structure.
            </remarks>
            <param name="handle"></param>
        </member>
        <member name="M:Tesseract.Pix.Save(System.String,System.Nullable{Tesseract.ImageFormat})">
            <summary>
            Saves the image to the specified file.
            </summary>
            <param name="filename">The path to the file.</param>
            <param name="format">The format to use when saving the image, if not specified the file extension is used to guess the format.</param>
        </member>
        <member name="M:Tesseract.Pix.Clone">
             <summary>
             Increments this pix's reference count and returns a reference to the same pix data.
             </summary>
             <remarks>
             A "clone" is simply a reference to an existing pix. It is implemented this way because
             image can be large and hence expensive to copy and extra handles need to be made with a simple
             policy to avoid double frees and memory leaks.
            
             The general usage protocol is:
             <list type="number">
             	<item>Whenever you want a new reference to an existing <see cref="T:Tesseract.Pix" /> call <see cref="M:Tesseract.Pix.Clone" />.</item>
                 <item>
             		Always call <see cref="M:Tesseract.Pix.Dispose(System.Boolean)" /> on all references. This decrements the reference count and
             		will destroy the pix when the reference count reaches zero.
             	</item>
             </list>
             </remarks>
             <returns>The pix with it's reference count incremented.</returns>
        </member>
        <member name="T:Tesseract.PixArrayAccessType">
            <summary>
            Determines how <see cref="T:Tesseract.Pix"/> of a <see cref="!:PixArray"/> structure are accessed.
            </summary>
        </member>
        <member name="F:Tesseract.PixArrayAccessType.Insert">
            <summary>
            Stuff it in; no copy, clone or copy-clone.
            </summary>
        </member>
        <member name="F:Tesseract.PixArrayAccessType.Copy">
            <summary>
            Make/use a copy of the object.
            </summary>
        </member>
        <member name="F:Tesseract.PixArrayAccessType.Clone">
            <summary>
            Make/use clone (ref count) of the object   
            </summary>
        </member>
        <member name="F:Tesseract.PixArrayAccessType.CopyClone">
            <summary>
            Make a new object and fill with with clones of each object in the array(s) 
            </summary>
        </member>
        <member name="T:Tesseract.PixColormap">
            <summary>
            Represents a colormap.
            </summary>
            <remarks>
            Once the colormap is assigned to a pix it is owned by that pix and will be disposed off automatically 
            when the pix is disposed off.
            </remarks>
        </member>
        <member name="P:Tesseract.PixData.Data">
            <summary>
            Pointer to the data.
            </summary>
        </member>
        <member name="P:Tesseract.PixData.WordsPerLine">
            <summary>
            Number of 32-bit words per line. 
            </summary>
        </member>
        <member name="M:Tesseract.PixData.EndianByteSwap">
            <summary>
            Swaps the bytes on little-endian platforms within a word; bytes 0 and 3 swapped, and bytes `1 and 2 are swapped.
            </summary>
            <remarks>
            This is required for little-endians in situations where we convert from a serialized byte order that is in raster order, 
            as one typically has in file formats, to one with MSB-to-the-left in each 32-bit word, or v.v. See <seealso href="http://www.leptonica.com/byte-addressing.html"/>
            </remarks>
        </member>
        <member name="M:Tesseract.PixData.GetDataBit(System.UInt32*,System.Int32)">
            <summary>
            Gets the pixel value for a 1bpp image.
            </summary>
        </member>
        <member name="M:Tesseract.PixData.SetDataBit(System.UInt32*,System.Int32,System.UInt32)">
            <summary>
            Sets the pixel value for a 1bpp image.
            </summary>
        </member>
        <member name="M:Tesseract.PixData.GetDataDIBit(System.UInt32*,System.Int32)">
            <summary>
            Gets the pixel value for a 2bpp image.
            </summary>
        </member>
        <member name="M:Tesseract.PixData.SetDataDIBit(System.UInt32*,System.Int32,System.UInt32)">
            <summary>
            Sets the pixel value for a 2bpp image.
            </summary>
        </member>
        <member name="M:Tesseract.PixData.GetDataQBit(System.UInt32*,System.Int32)">
            <summary>
            Gets the pixel value for a 4bpp image.
            </summary>
        </member>
        <member name="M:Tesseract.PixData.SetDataQBit(System.UInt32*,System.Int32,System.UInt32)">
            <summary>
            Sets the pixel value for a 4bpp image.
            </summary>
        </member>
        <member name="M:Tesseract.PixData.GetDataByte(System.UInt32*,System.Int32)">
            <summary>
            Gets the pixel value for a 8bpp image.
            </summary>
        </member>
        <member name="M:Tesseract.PixData.SetDataByte(System.UInt32*,System.Int32,System.UInt32)">
            <summary>
            Sets the pixel value for a 8bpp image.
            </summary>
        </member>
        <member name="M:Tesseract.PixData.GetDataTwoByte(System.UInt32*,System.Int32)">
            <summary>
            Gets the pixel value for a 16bpp image.
            </summary>
        </member>
        <member name="M:Tesseract.PixData.SetDataTwoByte(System.UInt32*,System.Int32,System.UInt32)">
            <summary>
            Sets the pixel value for a 16bpp image.
            </summary>
        </member>
        <member name="M:Tesseract.PixData.GetDataFourByte(System.UInt32*,System.Int32)">
            <summary>
            Gets the pixel value for a 32bpp image.
            </summary>
        </member>
        <member name="M:Tesseract.PixData.SetDataFourByte(System.UInt32*,System.Int32,System.UInt32)">
            <summary>
            Sets the pixel value for a 32bpp image.
            </summary>
        </member>
        <member name="T:Tesseract.TesseractEngine">
            <summary>
            The tesseract OCR engine.
            </summary>
        </member>
        <member name="M:Tesseract.TesseractEngine.#ctor(System.String,System.String,Tesseract.EngineMode)">
            <summary>
            Creates a new instance of <see cref="T:Tesseract.TesseractEngine"/> with the specified <paramref name="engineMode"/>.
            </summary>
            <remarks>
            <para>
            The <paramref name="datapath"/> parameter should point to the directory that contains the 'tessdata' folder
            for example if your tesseract language data is installed in <c>C:\Tesseract\tessdata</c> the value of datapath should
            be <c>C:\Tesseract</c>. Note that tesseract will use the value of the <c>TESSDATA_PREFIX</c> environment variable if defined,
            effectively ignoring the value of <paramref name="datapath"/> parameter.
            </para>
            </remarks>
            <param name="datapath">The path to the parent directory that contains the 'tessdata' directory, ignored if the <c>TESSDATA_PREFIX</c> environment variable is defined.</param>
            <param name="language">The language to load, for example 'eng' for English.</param>
            <param name="engineMode">The <see cref="T:Tesseract.EngineMode"/> value to use when initialising the tesseract engine.</param>
        </member>
        <member name="M:Tesseract.TesseractEngine.#ctor(System.String,System.String,Tesseract.EngineMode,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Tesseract.TesseractEngine"/> with the specified <paramref name="engineMode"/> and <paramref name="configFiles"/>.
            </summary>
            <remarks>
            <para>
            The <paramref name="datapath"/> parameter should point to the directory that contains the 'tessdata' folder
            for example if your tesseract language data is installed in <c>C:\Tesseract\tessdata</c> the value of datapath should
            be <c>C:\Tesseract</c>. Note that tesseract will use the value of the <c>TESSDATA_PREFIX</c> environment variable if defined,
            effectively ignoring the value of <paramref name="datapath"/> parameter.
            </para>
            </remarks>
            <param name="datapath">The path to the parent directory that contains the 'tessdata' directory, ignored if the <c>TESSDATA_PREFIX</c> environment variable is defined.</param>
            <param name="language">The language to load, for example 'eng' for English.</param>
            <param name="engineMode">The <see cref="T:Tesseract.EngineMode"/> value to use when initialising the tesseract engine.</param>
            <param name="configFiles">
            An optional sequence of tesseract configuration files to load, encoded using UTF8 without BOM
            with Unix end of line characters you can use an advanced text editor such as Notepad++ to accomplish this.
            </param>
        </member>
        <member name="M:Tesseract.TesseractEngine.Process(Tesseract.Pix,System.Nullable{Tesseract.PageSegMode})">
            <summary>
            Processes the specific image.
            </summary>
            <remarks>
            You can only have one result iterator open at any one time.
            </remarks>
            <param name="image">The image to process.</param>
            <param name="pageSegMode">The page layout analyasis method to use.</param>
        </member>
        <member name="M:Tesseract.TesseractEngine.Process(Tesseract.Pix,Tesseract.Rect,System.Nullable{Tesseract.PageSegMode})">
            <summary>
            Processes a specified region in the image using the specified page layout analysis mode.
            </summary>
            <remarks>
            You can only have one result iterator open at any one time.
            </remarks>
            <param name="image">The image to process.</param>
            <param name="region">The image region to process.</param>
            <param name="pageSegMode">The page layout analyasis method to use.</param>
            <returns>A result iterator</returns>
        </member>
        <member name="M:Tesseract.TesseractEngine.Process(Tesseract.Pix,System.String,System.Nullable{Tesseract.PageSegMode})">
            <summary>
            Processes the specific image.
            </summary>
            <remarks>
            You can only have one result iterator open at any one time.
            </remarks>
            <param name="image">The image to process.</param>
            <param name="inputName">Sets the input file's name, only needed for training or loading a uzn file.</param>
            <param name="pageSegMode">The page layout analyasis method to use.</param>
        </member>
        <member name="M:Tesseract.TesseractEngine.Process(Tesseract.Pix,System.String,Tesseract.Rect,System.Nullable{Tesseract.PageSegMode})">
            <summary>
            Processes a specified region in the image using the specified page layout analysis mode.
            </summary>
            <remarks>
            You can only have one result iterator open at any one time.
            </remarks>
            <param name="image">The image to process.</param>
            <param name="inputName">Sets the input file's name, only needed for training or loading a uzn file.</param>
            <param name="region">The image region to process.</param>
            <param name="pageSegMode">The page layout analyasis method to use.</param>
            <returns>A result iterator</returns>
        </member>
        <member name="T:Tesseract.TesseractEngine.PageDisposalHandle">
            <summary>
            Ties the specified pix to the lifecycle of a page.
            </summary>
        </member>
        <member name="P:Tesseract.TesseractEngine.DefaultPageSegMode">
            <summary>
            Gets or sets default <see cref="T:Tesseract.PageSegMode" /> mode used by <see cref="M:Tesseract.TesseractEngine.Process(Tesseract.Pix,Tesseract.Rect,System.Nullable{Tesseract.PageSegMode})" />.
            </summary>
        </member>
        <member name="M:Tesseract.TesseractEngine.TryGetBoolVariable(System.String,System.Boolean@)">
            <summary>
            Attempts to retrieve the value for a boolean variable.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="value">The current value of the variable.</param>
            <returns>Returns <c>True</c> if successful; otherwise <c>False</c>.</returns>
        </member>
        <member name="T:Tesseract.TesseractException">
            <summary>
            Desctiption of TesseractException.
            </summary>
        </member>
        <member name="M:InteropDotNet.LibraryLoader.CheckCurrentAppDomainBin(System.String,System.String)">
            <summary>
            Special test for web applications.
            </summary>
            <remarks>
            Note that this makes a couple of assumptions these being:
            
            <list type="bullet">
                <item>That the current application domain's location for web applications corresponds to the web applications root directory.</item>
                <item>That the tesseract\leptonica dlls reside in the corresponding x86 or x64 directories in the bin directory under the apps root directory.</item>
            </list>
            </remarks>
            <param name="fileName"></param>
            <param name="platformName"></param>
            <returns></returns>
        </member>
    </members>
</doc>
